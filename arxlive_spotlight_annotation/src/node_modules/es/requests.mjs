import { defaultProvider } from '@aws-sdk/credential-provider-node';
import { SignatureV4 } from '@aws-sdk/signature-v4';
import { NodeHttpHandler } from '@aws-sdk/node-http-handler';
import sha256 from '@aws-crypto/sha256-browser';
import { HttpRequest } from '@aws-sdk/protocol-http';
const { Sha256 } = sha256;

import { logger } from '../logging.mjs';

const signer = new SignatureV4({
	credentials: defaultProvider(),
	region: 'eu-west-2',
	service: 'es',
	sha256: Sha256,
});

export const buildRequest = (
	domain,
	path,
	method,
	{ payload = undefined, query = {} } = {}
) => {
	const body =
		payload && typeof payload !== 'string'
			? JSON.stringify(payload)
			: payload;
	return new HttpRequest({
		body,
		method,
		path,
		query,
		headers: {
			'Content-Type': 'application/json',
			host: domain,
		},
		hostname: domain,
	});
};

export const makeRequest = async (request, { verbose = false } = {}) => {
	// Sign the request
	const signedRequest = await signer.sign(request);
	// Send the request
	const client = new NodeHttpHandler();
	const { response } = await client.handle(signedRequest);

	if (verbose) {
		logger.info(response.statusCode + ' ' + response.body.statusMessage);
	}

	var responseBody = '';
	await new Promise((resolve) => {
		response.body.on('data', (chunk) => {
			responseBody += chunk;
		});
		response.body.on('end', () => {
			responseBody = JSON.parse(responseBody);
			if (verbose) {
				logger.info(
					'Response body: ',
					JSON.stringify(responseBody, null, 2)
				);
			}
			resolve(responseBody);
		});
	})
		.then((value) => value)
		.catch((error) => {
			logger.error(error);
		});
	return responseBody;
};
