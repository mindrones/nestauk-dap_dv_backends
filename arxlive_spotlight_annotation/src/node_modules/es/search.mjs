import { buildRequest, makeRequest } from 'es/requests.mjs';

export const clearScroll = async (domain, id = null) => {
	const payload = id ? { scroll_id: id } : undefined;
	const path = id ? '_search/scroll' : '_search/scroll/_all';
	const request = buildRequest(domain, path, 'DELETE', { payload });
	const result = makeRequest(request);
	return result;
};

const first = async (domain, index, size) => {
	const path = `${index}/_search`;
	const query = { scroll: '1m' };
	const payload = { size, sort: ['_doc'] };
	const firstRequest = buildRequest(domain, path, 'POST', {
		payload,
		query,
	});
	const result = await makeRequest(firstRequest);
	return result;
};
// subsequent requests should be made using the _scroll_id
const subsequent = async (domain, id) => {
	const path = `_search/scroll`;
	const payload = { scroll: '1m', scroll_id: id };
	const subsequentRequest = buildRequest(domain, path, 'POST', {
		payload,
	});
	const result = await makeRequest(subsequentRequest);
	return result;
};

export async function* scroll(
	domain,
	index,
	{ size = 1000, pages = 'all' } = {}
) {
	// set limit to infinity if all to iterate all results
	const limit = pages === 'all' ? Infinity : pages;
	let next = await first(domain, index, size);
	for (let i = 0; i < limit && next.hits.hits.length !== 0; i++) {
		yield next;
		next = await subsequent(domain, next._scroll_id);
	}
	return;
}
